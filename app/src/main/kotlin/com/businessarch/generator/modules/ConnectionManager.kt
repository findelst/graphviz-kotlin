package com.businessarch.generator.modules

import com.businessarch.generator.model.*
import kotlin.math.abs
import kotlin.math.roundToInt

/**
 * –ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–≤—è–∑—è–º–∏ –º–µ–∂–¥—É —Å–∏—Å—Ç–µ–º–∞–º–∏
 * –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∞–Ω–∞–ª–∏–∑ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é SVG –ø—É—Ç–µ–π –¥–ª—è —Å–≤—è–∑–µ–π
 */
class ConnectionManager(private val connectionRouter: ConnectionRouter) {

    /**
     * –†–µ–Ω–¥–µ—Ä–∏—Ç —Å–≤—è–∑—å –º–µ–∂–¥—É —Å–∏—Å—Ç–µ–º–∞–º–∏ –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ –ø—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
     */
    fun renderBusinessConnection(
        sourceSystem: System, 
        targetSystem: System, 
        connectionData: Connection = Connection("", ""),
        parallelContext: ParallelContext = ParallelContext()
    ): String {
        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è ConnectionRouter –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        val routingContext = RoutingContext(
            parallelContext = parallelContext,
            connectionData = connectionData,
            spatial = parallelContext.spatial ?: connectionData.spatial
        )
        
        // –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ
        parallelContext.spatial?.let { spatial ->
            println("üéØ –°–≤—è–∑—å ${connectionData.source} -> ${connectionData.target}: ${spatial.primaryDirection} (${spatial.angle.roundToInt()}¬∞, –¥–∏–∞–≥–æ–Ω–∞–ª—å: ${spatial.isDiagonal})")
        }
        
        // –°–æ–∑–¥–∞–µ–º –º–∞—Ä—à—Ä—É—Ç —Å –ø–æ–º–æ—â—å—é ConnectionRouter –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        val route = connectionRouter.createRoute(sourceSystem, targetSystem, routingContext)
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º CSS –∫–ª–∞—Å—Å –∏ –º–∞—Ä–∫–µ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        val cssClass = getSpatialConnectionCssClass(sourceSystem, targetSystem, parallelContext.spatial)
        val markerType = getSpatialConnectionMarkerType(sourceSystem, targetSystem, parallelContext.spatial)
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º SVG —ç–ª–µ–º–µ–Ω—Ç –ø—É—Ç–∏
        var connectionSVG = """<path d="${route.path}" class="$cssClass" marker-end="url(#$markerType)" />"""
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å–≤—è–∑–∏, –µ—Å–ª–∏ –µ—Å—Ç—å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        connectionData.description?.let { description ->
            connectionSVG += createConnectionLabel(route.labelPosition, description)
        }
        
        return connectionSVG
    }

    /**
     * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö –∏ –∏—Å—Ö–æ–¥—è—â–∏—Ö —Å—Ç—Ä–µ–ª–æ—á–µ–∫
     */
    fun analyzeConnections(connections: List<Connection>, systemMap: Map<String, System>): ConnectionGroups {
        val incomingGroups = mutableMapOf<String, ConnectionGroup>()
        val outgoingGroups = mutableMapOf<String, ConnectionGroup>()
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–æ —Ü–µ–ª–µ–≤—ã–º —Å–∏—Å—Ç–µ–º–∞–º (–≤—Ö–æ–¥—è—â–∏–µ)
        connections.forEach { conn ->
            val targetSystem = systemMap[conn.target]
            val sourceSystem = systemMap[conn.source]
            
            if (targetSystem == null || sourceSystem == null) return@forEach
            
            // –í—Ö–æ–¥—è—â–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            val incomingGroup = incomingGroups.getOrPut(conn.target) {
                ConnectionGroup(
                    connections = mutableListOf(),
                    totalIncoming = 0,
                    totalOutgoing = 0,
                    side = determineDominantSide(targetSystem, connections, systemMap)
                )
            }
            
            incomingGroup.connections.add(conn)
            incomingGroup.totalIncoming++
            
            // –ò—Å—Ö–æ–¥—è—â–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            val outgoingGroup = outgoingGroups.getOrPut(conn.source) {
                ConnectionGroup(
                    connections = mutableListOf(),
                    totalIncoming = 0,
                    totalOutgoing = 0,
                    side = null
                )
            }
            
            outgoingGroup.connections.add(conn)
            outgoingGroup.totalOutgoing++
        }
        
        return ConnectionGroups(incoming = incomingGroups, outgoing = outgoingGroups)
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –¥–æ–º–∏–Ω–∏—Ä—É—é—â—É—é —Å—Ç–æ—Ä–æ–Ω—É –¥–ª—è –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
     */
    private fun determineDominantSide(targetSystem: System, connections: List<Connection>, systemMap: Map<String, System>): String {
        val sides = mutableMapOf("left" to 0, "right" to 0, "top" to 0, "bottom" to 0)
        
        connections
            .filter { it.target == targetSystem.name }
            .forEach { conn ->
                val sourceSystem = systemMap[conn.source] ?: return@forEach
                
                val relativePos = analyzeRelativePosition(sourceSystem, targetSystem)
                
                when (relativePos.primaryDirection) {
                    "left" -> sides["left"] = sides["left"]!! + 1
                    "right" -> sides["right"] = sides["right"]!! + 1
                    "up" -> sides["top"] = sides["top"]!! + 1
                    "down" -> sides["bottom"] = sides["bottom"]!! + 1
                }
            }
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–æ—Ä–æ–Ω—É —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        return sides.maxByOrNull { it.value }?.key ?: "left"
    }

    /**
     * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –¥–≤—É—Ö –ê–°
     */
    private fun analyzeRelativePosition(sourceSystem: System, targetSystem: System): RelativePosition {
        val sourceCenterX = sourceSystem.x + sourceSystem.width / 2
        val sourceCenterY = sourceSystem.y + sourceSystem.height / 2
        val targetCenterX = targetSystem.x + targetSystem.width / 2
        val targetCenterY = targetSystem.y + targetSystem.height / 2

        val deltaX = targetCenterX - sourceCenterX
        val deltaY = targetCenterY - sourceCenterY
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        val horizontalDistance = abs(deltaX)
        val verticalDistance = abs(deltaY)
        
        val primaryDirection: String
        val secondaryDirection: String
        
        if (horizontalDistance > verticalDistance) {
            // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–æ–±–ª–∞–¥–∞–µ—Ç
            primaryDirection = if (deltaX > 0) "right" else "left"
            secondaryDirection = if (deltaY > 0) "down" else "up"
        } else {
            // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–æ–±–ª–∞–¥–∞–µ—Ç
            primaryDirection = if (deltaY > 0) "down" else "up"
            secondaryDirection = if (deltaX > 0) "right" else "left"
        }

        return RelativePosition(
            primaryDirection = primaryDirection,
            secondaryDirection = secondaryDirection,
            deltaX = deltaX,
            deltaY = deltaY,
            horizontalDistance = horizontalDistance,
            verticalDistance = verticalDistance
        )
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç CSS –∫–ª–∞—Å—Å –¥–ª—è —Å–≤—è–∑–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
     */
    private fun getSpatialConnectionCssClass(sourceSystem: System, targetSystem: System, spatial: SpatialInfo?): String {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–≤—è–∑—å –≤–Ω–µ—à–Ω–µ–π (–∫ –≤–Ω–µ—à–Ω–∏–º –ê–°)
        if (targetSystem.platform == "–í–Ω–µ—à–Ω—è—è –ê–°" || sourceSystem.platform == "–í–Ω–µ—à–Ω—è—è –ê–°") {
            return "business-connection-external"
        }
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏
        spatial?.let { spatialInfo ->
            if (spatialInfo.isDiagonal) {
                return "business-connection-diagonal"
            }
            if (spatialInfo.isClose) {
                return "business-connection-close"
            }
            
            // –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            return when (spatialInfo.primaryDirection) {
                "right", "left" -> "business-connection" // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏ - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å—Ç–∏–ª—å
                "up", "down" -> "business-connection" // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏ - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å—Ç–∏–ª—å —Å –æ–±—Ö–æ–¥–æ–º —Å–ø—Ä–∞–≤–∞
                else -> "business-connection"
            }
        }
        
        // Fallback –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É —Å—Ç–∏–ª—é
        return "business-connection"
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –º–∞—Ä–∫–µ—Ä–∞ –¥–ª—è —Å–≤—è–∑–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    private fun getSpatialConnectionMarkerType(sourceSystem: System, targetSystem: System, spatial: SpatialInfo?): String {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–≤—è–∑—å –≤–Ω–µ—à–Ω–µ–π (–∫ –≤–Ω–µ—à–Ω–∏–º –ê–°)
        if (targetSystem.platform == "–í–Ω–µ—à–Ω—è—è –ê–°" || sourceSystem.platform == "–í–Ω–µ—à–Ω—è—è –ê–°") {
            return "arrowhead-external"
        }
        
        // –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–≤—è–∑–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–∞—Ä–∫–µ—Ä
        // (–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ —Ç–∏–ø –º–∞—Ä–∫–µ—Ä–∞)
        return "arrowhead-business"
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –ø–æ–¥–ø–∏—Å—å –¥–ª—è —Å–≤—è–∑–∏
     */
    private fun createConnectionLabel(position: Point, description: String): String {
        val maxLength = 20
        val truncatedDesc = if (description.length > maxLength) {
            description.substring(0, maxLength) + "..."
        } else {
            description
        }
        
        return """
            <rect x="${position.x - 40}" y="${position.y - 10}" width="80" height="20" 
                  fill="rgba(255,255,255,0.9)" stroke="#666" stroke-width="1" rx="3" class="connection-label-bg"/>
            <text x="${position.x}" y="${position.y + 4}" text-anchor="middle" 
                  class="connection-label-text">${escapeXml(truncatedDesc)}</text>
        """.trimIndent()
    }

    /**
     * –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç XML —Å–∏–º–≤–æ–ª—ã
     */
    private fun escapeXml(text: String): String {
        return text
            .replace("&", "&amp;")
            .replace("<", "&lt;")
            .replace(">", "&gt;")
            .replace("\"", "&quot;")
            .replace("'", "&#39;")
    }
}

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–ª–∞—Å—Å—ã
 */
data class ConnectionGroups(
    val incoming: Map<String, ConnectionGroup>,
    val outgoing: Map<String, ConnectionGroup>
)

data class ConnectionGroup(
    val connections: MutableList<Connection>,
    var totalIncoming: Int,
    var totalOutgoing: Int,
    val side: String?
)

data class RelativePosition(
    val primaryDirection: String,
    val secondaryDirection: String,
    val deltaX: Double,
    val deltaY: Double,
    val horizontalDistance: Double,
    val verticalDistance: Double
)
