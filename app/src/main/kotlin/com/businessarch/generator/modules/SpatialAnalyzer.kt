package com.businessarch.generator.modules

import com.businessarch.generator.model.*
import kotlin.math.*

/**
 * –ú–æ–¥—É–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π –º–µ–∂–¥—É –±–ª–æ–∫–∞–º–∏
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–≤—è–∑–µ–π –∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
 */
class SpatialAnalyzer {
    // –ü–æ—Ä–æ–≥–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
    private val diagonalThreshold = 0.5 // –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    private val proximityThreshold = 50.0  // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å—á–∏—Ç–∞–Ω–∏—è –±–ª–æ–∫–æ–≤ "–±–ª–∏–∑–∫–∏–º–∏"

    /**
     * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ —Å–≤—è–∑–∏ –≤ —Å–∏—Å—Ç–µ–º–µ –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è
     */
    fun analyzeAllConnections(systems: List<System>, connections: List<Connection>): SpatialAnalysisResult {
        println("üîç –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π...")
        
        // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É —Å–∏—Å—Ç–µ–º –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
        val systemMap = systems.associateBy { it.name }
            .mapValues { (_, system) ->
                SystemWithSpatialInfo(
                    system = system,
                    center = calculateCenter(system),
                    bounds = calculateBounds(system)
                )
            }

        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Å–≤—è–∑—å
        val analyzedConnections = connections.map { connection ->
            val sourceSystem = systemMap[connection.source]
            val targetSystem = systemMap[connection.target]
            
            if (sourceSystem == null || targetSystem == null) {
                println("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${connection.source} -> ${connection.target}")
                return@map connection.copy(spatial = null)
            }

            val spatial = analyzeSpatialRelation(sourceSystem, targetSystem)
            
            println("üìä ${connection.source} -> ${connection.target}: ${spatial.primaryDirection} (${spatial.angle.roundToInt()}¬∞)")
            
            connection.copy(spatial = spatial)
        }

        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–≤—è–∑–∏ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        val connectionsBySource = groupConnectionsBySource(analyzedConnections)
        
        // –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        val stats = createAnalysisStats(analyzedConnections)
        
        return SpatialAnalysisResult(
            connections = analyzedConnections,
            connectionsBySource = connectionsBySource,
            stats = stats
        )
    }

    /**
     * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –º–µ–∂–¥—É –¥–≤—É–º—è —Å–∏—Å—Ç–µ–º–∞–º–∏
     */
    private fun analyzeSpatialRelation(source: SystemWithSpatialInfo, target: SystemWithSpatialInfo): SpatialInfo {
        val deltaX = target.center.x - source.center.x
        val deltaY = target.center.y - source.center.y
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –∏ —É–≥–æ–ª
        val distance = sqrt(deltaX * deltaX + deltaY * deltaY)
        val angle = atan2(deltaY, deltaX) * 180 / PI
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        val horizontalDistance = abs(deltaX)
        val verticalDistance = abs(deltaY)
        
        val primaryDirection: String
        val secondaryDirection: String
        
        if (horizontalDistance > verticalDistance) {
            // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–æ–±–ª–∞–¥–∞–µ—Ç
            primaryDirection = if (deltaX > 0) "right" else "left"
            secondaryDirection = if (deltaY > 0) "down" else "up"
        } else {
            // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–æ–±–ª–∞–¥–∞–µ—Ç
            primaryDirection = if (deltaY > 0) "down" else "up"
            secondaryDirection = if (deltaX > 0) "right" else "left"
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–≤—è–∑—å –¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω–æ–π
        val ratio = min(horizontalDistance, verticalDistance) / max(horizontalDistance, verticalDistance)
        val isDiagonal = ratio > diagonalThreshold
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è—é—Ç—Å—è –ª–∏ —Å–∏—Å—Ç–µ–º—ã –±–ª–∏–∑–∫–∏–º–∏
        val isClose = distance < proximityThreshold
        
        return SpatialInfo(
            primaryDirection = primaryDirection,
            secondaryDirection = secondaryDirection,
            angle = angle,
            distance = distance,
            isDiagonal = isDiagonal,
            isClose = isClose,
            deltaX = deltaX,
            deltaY = deltaY
        )
    }

    /**
     * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ü–µ–Ω—Ç—Ä —Å–∏—Å—Ç–µ–º—ã
     */
    private fun calculateCenter(system: System): Point {
        return Point(
            x = system.x + system.width / 2,
            y = system.y + system.height / 2
        )
    }

    /**
     * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≥—Ä–∞–Ω–∏—Ü—ã —Å–∏—Å—Ç–µ–º—ã
     */
    private fun calculateBounds(system: System): Bounds {
        return Bounds(
            left = system.x,
            top = system.y,
            right = system.x + system.width,
            bottom = system.y + system.height
        )
    }

    /**
     * –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç —Å–≤—è–∑–∏ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
     */
    private fun groupConnectionsBySource(connections: List<Connection>): Map<String, List<Connection>> {
        return connections.groupBy { it.source }
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–Ω–∞–ª–∏–∑–∞
     */
    private fun createAnalysisStats(connections: List<Connection>): SpatialStats {
        val totalConnections = connections.size
        val diagonalConnections = connections.count { it.spatial?.isDiagonal == true }
        val closeConnections = connections.count { it.spatial?.isClose == true }
        
        val directionStats = connections.mapNotNull { it.spatial?.primaryDirection }
            .groupingBy { it }
            .eachCount()
        
        return SpatialStats(
            totalConnections = totalConnections,
            diagonalConnections = diagonalConnections,
            closeConnections = closeConnections,
            directionDistribution = directionStats
        )
    }

    /**
     * –í—ã–≤–æ–¥–∏—Ç –æ—Ç—á–µ—Ç –æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ
     */
    fun printAnalysisReport(result: SpatialAnalysisResult) {
        println("\nüìã === –û–¢–ß–ï–¢ –ü–†–û–°–¢–†–ê–ù–°–¢–í–ï–ù–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê ===")
        println("üîó –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤—è–∑–µ–π: ${result.stats.totalConnections}")
        println("‚ÜóÔ∏è –î–∏–∞–≥–æ–Ω–∞–ª—å–Ω—ã—Ö —Å–≤—è–∑–µ–π: ${result.stats.diagonalConnections}")
        println("üìç –ë–ª–∏–∑–∫–∏—Ö —Å–≤—è–∑–µ–π: ${result.stats.closeConnections}")
        
        println("\nüìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º:")
        result.stats.directionDistribution.forEach { (direction, count) ->
            val percentage = (count * 100.0 / result.stats.totalConnections).roundToInt()
            println("  $direction: $count ($percentage%)")
        }
        
        println("\nüéØ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏—Å—Ö–æ–¥—è—â–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:")
        result.connectionsBySource
            .filter { it.value.size > 1 }
            .forEach { (source, connections) ->
                println("  $source ‚Üí ${connections.size} —Å–≤—è–∑–µ–π")
                connections.forEach { conn ->
                    val spatial = conn.spatial
                    if (spatial != null) {
                        println("    ‚Üí ${conn.target}: ${spatial.primaryDirection} (${spatial.distance.roundToInt()}px)")
                    }
                }
            }
        
        println("=== –ö–û–ù–ï–¶ –û–¢–ß–ï–¢–ê ===\n")
    }
}

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–ª–∞—Å—Å—ã –¥–ª—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
 */
data class SystemWithSpatialInfo(
    val system: System,
    val center: Point,
    val bounds: Bounds
)

data class Point(
    val x: Double,
    val y: Double
)

data class Bounds(
    val left: Double,
    val top: Double,
    val right: Double,
    val bottom: Double
)

data class SpatialAnalysisResult(
    val connections: List<Connection>,
    val connectionsBySource: Map<String, List<Connection>>,
    val stats: SpatialStats
)

data class SpatialStats(
    val totalConnections: Int,
    val diagonalConnections: Int,
    val closeConnections: Int,
    val directionDistribution: Map<String, Int>
)
