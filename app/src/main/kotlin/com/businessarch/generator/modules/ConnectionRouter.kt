package com.businessarch.generator.modules

import com.businessarch.generator.model.*
import kotlin.math.*

/**
 * –ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–µ–π —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –º–µ–∂–¥—É –±–ª–æ–∫–∞–º–∏
 * –°–æ–¥–µ—Ä–∂–∏—Ç –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—É—é –º–æ–¥–µ–ª—å –ø—Ä–∞–≤–∏–ª –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
 */
class ConnectionRouter {
    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
    private val exitLength = 20.0        // –î–ª–∏–Ω–∞ –≤—ã—Ö–æ–¥—è—â–µ–≥–æ –æ—Ç—Ä–µ–∑–∫–∞
    private val entryLength = 20.0       // –î–ª–∏–Ω–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ –æ—Ç—Ä–µ–∑–∫–∞
    private val verticalSpacing = 40.0   // –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–º–∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–º–∏ —É—á–∞—Å—Ç–∫–∞–º–∏
    private val outgoingSpacing = 20.0   // –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –∏—Å—Ö–æ–¥—è—â–∏–º–∏ —Å—Ç—Ä–µ–ª–∫–∞–º–∏
    private val bypassPadding = 30.0     // –û—Ç—Å—Ç—É–ø –¥–ª—è –æ–±—Ö–æ–¥–∞ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π

    // –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π
    private var spatialMap: List<System> = emptyList()
    private var regions: List<Region> = emptyList()

    private val rules = initializeRules()

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
     */
    private fun initializeRules(): List<RoutingRule> {
        return listOf(
            RoutingRule(
                name = "internal_system_connection",
                description = "–°–≤—è–∑—å –≤–Ω—É—Ç—Ä–∏ –æ–¥–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –º–µ–∂–¥—É FP - –ø–µ—Ç–ª—è —Å –ø—Ä–∞–≤–æ–π —Å—Ç–æ—Ä–æ–Ω—ã",
                condition = { _, _, context ->
                    context.connectionType == "internal"
                },
                strategy = "internal_loop"
            ),
            RoutingRule(
                name = "adjacent_systems_direct",
                description = "–°–æ—Å–µ–¥–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –±–µ–∑ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π - –ø—Ä—è–º–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ",
                condition = { source, target, context ->
                    areSystemsAdjacent(source, target) &&
                    !hasObstaclesBetween(source, target, context) &&
                    context.connectionType != "inter-region"
                },
                strategy = "direct_connection"
            ),
            RoutingRule(
                name = "same_region_with_obstacles",
                description = "–°–∏—Å—Ç–µ–º—ã –≤ –æ–¥–Ω–æ–º —Ä–µ–≥–∏–æ–Ω–µ —Å –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è–º–∏ –º–µ–∂–¥—É –Ω–∏–º–∏",
                condition = { source, target, context ->
                    context.connectionType == "intra-platform" &&
                    hasObstaclesBetween(source, target, context)
                },
                strategy = "intra_region_bypass"
            ),
            RoutingRule(
                name = "inter_region_connection",
                description = "–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –º–µ–∂–¥—É —Ä–µ–≥–∏–æ–Ω–∞–º–∏ - –æ–±—Ö–æ–¥ —Ä–µ–≥–∏–æ–Ω–∞ —Å–≤–µ—Ä—Ö—É –∏–ª–∏ —Å–Ω–∏–∑—É",
                condition = { source, target, context ->
                    context.connectionType == "inter-region"
                },
                strategy = "inter_region_bypass"
            ),
            RoutingRule(
                name = "spatial_optimized_routing",
                description = "–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞",
                condition = { _, _, context ->
                    context.spatial != null
                },
                strategy = "spatial_routing"
            ),
            RoutingRule(
                name = "default_routing",
                description = "–ë–∞–∑–æ–≤–∞—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é",
                condition = { _, _, _ -> true }, // –í—Å–µ–≥–¥–∞ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫–∞–∫ fallback
                strategy = "default_connection"
            )
        )
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω—É—é –∫–∞—Ä—Ç—É
     */
    fun initializeSpatialMap(systems: List<System>, regions: List<Region>) {
        this.spatialMap = systems
        this.regions = regions
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –º–∞—Ä—à—Ä—É—Ç –º–µ–∂–¥—É –¥–≤—É–º—è —Å–∏—Å—Ç–µ–º–∞–º–∏
     */
    fun createRoute(source: System, target: System, context: RoutingContext): RouteResult {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        val connectionType = determineConnectionType(source, target)
        val fullContext = context.copy(connectionType = connectionType)
        
        // –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –ø—Ä–∞–≤–∏–ª–æ
        val applicableRule = rules.find { rule ->
            rule.condition(source, target, fullContext)
        } ?: rules.last() // fallback –∫ default_routing
        
        println("üéØ –ú–∞—Ä—à—Ä—É—Ç ${source.name} -> ${target.name}: –ø—Ä–∞–≤–∏–ª–æ '${applicableRule.name}', —Å—Ç—Ä–∞—Ç–µ–≥–∏—è '${applicableRule.strategy}'")
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
        return when (applicableRule.strategy) {
            "internal_loop" -> createInternalLoopRoute(source, target, fullContext)
            "direct_connection" -> createDirectRoute(source, target, fullContext)
            "intra_region_bypass" -> createIntraRegionBypassRoute(source, target, fullContext)
            "inter_region_bypass" -> createInterRegionBypassRoute(source, target, fullContext)
            "spatial_routing" -> createSpatialRoute(source, target, fullContext)
            else -> createDefaultRoute(source, target, fullContext)
        }
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –º–µ–∂–¥—É —Å–∏—Å—Ç–µ–º–∞–º–∏
     */
    private fun determineConnectionType(source: System, target: System): String {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤—è–∑—å –≤–Ω—É—Ç—Ä–∏ –æ–¥–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã (–º–µ–∂–¥—É FP –æ–¥–Ω–æ–π –ê–°)
        if (source.name == target.name) {
            return "internal"
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è—é—Ç—Å—è –ª–∏ —Å–∏—Å—Ç–µ–º—ã –≤–Ω–µ—à–Ω–∏–º–∏
        if (source.platform == "–í–Ω–µ—à–Ω—è—è –ê–°" || target.platform == "–í–Ω–µ—à–Ω—è—è –ê–°") {
            return "external"
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏–æ–Ω—ã
        val connectionType = when {
            source.region != target.region -> "inter-region"
            source.platform != target.platform -> "inter-platform"
            else -> "intra-platform"
        }
        
        return connectionType
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –ø—Ä—è–º–æ–π –º–∞—Ä—à—Ä—É—Ç –º–µ–∂–¥—É —Å–∏—Å—Ç–µ–º–∞–º–∏
     */
    private fun createDirectRoute(source: System, target: System, context: RoutingContext): RouteResult {
        val sourcePoint = getOptimalExitPoint(source, target, context)
        val targetPoint = getOptimalEntryPoint(target, source, context)
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –æ—Ç—Ä–µ–∑–æ–∫
        val needsHorizontalSegment = needsHorizontalSegment(sourcePoint, targetPoint, source, target)
        
        val (path, labelPos) = if (needsHorizontalSegment) {
            println("üîß –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –æ—Ç—Ä–µ–∑–æ–∫ –¥–ª—è: ${source.name} -> ${target.name}")
            createRouteWithHorizontalSegment(sourcePoint, targetPoint, source, target)
        } else {
            // –ü—Ä—è–º–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            val path = "M ${sourcePoint.x},${sourcePoint.y} L ${targetPoint.x},${targetPoint.y}"
            val labelPos = Point(
                x = (sourcePoint.x + targetPoint.x) / 2,
                y = (sourcePoint.y + targetPoint.y) / 2
            )
            Pair(path, labelPos)
        }
        
        return RouteResult(path = path, labelPosition = labelPos)
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –º–∞—Ä—à—Ä—É—Ç —Å –æ–±—Ö–æ–¥–æ–º –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π –≤–Ω—É—Ç—Ä–∏ —Ä–µ–≥–∏–æ–Ω–∞
     */
    private fun createIntraRegionBypassRoute(source: System, target: System, context: RoutingContext): RouteResult {
        val sourcePoint = getOptimalExitPoint(source, target, context)
        val targetPoint = getOptimalEntryPoint(target, source, context)
        
        // –ï—Å–ª–∏ —Ç–æ—á–∫–∏ –º–æ–∂–Ω–æ —Å–æ–µ–¥–∏–Ω–∏—Ç—å –ø—Ä—è–º–æ (–Ω–µ—Ç –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π), –¥–µ–ª–∞–µ–º –ø—Ä—è–º–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        if (!hasObstaclesBetween(source, target, context)) {
            return createDirectRoute(source, target, context)
        }
        
        // –î–ª—è –æ–±—Ö–æ–¥–∞ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π —Ç–∞–∫–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –æ—Ç—Ä–µ–∑–∫–∏
        val needsHorizontalSegment = needsHorizontalSegment(sourcePoint, targetPoint, source, target)
        
        val (path, labelPos) = if (needsHorizontalSegment) {
            createRouteWithHorizontalSegment(sourcePoint, targetPoint, source, target)
        } else {
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ö–æ–¥–∞ –¥–ª—è —Å–ª—É—á–∞–µ–≤ –±–µ–∑ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã—Ö –æ—Ç—Ä–µ–∑–∫–æ–≤
            val bypassDirection = determineBestBypassDirection(source, target, context)
            
            val waypoints = when (bypassDirection) {
                "right" -> createRightBypassWaypoints(sourcePoint, targetPoint, source, target)
                "left" -> createLeftBypassWaypoints(sourcePoint, targetPoint, source, target)
                "top" -> createTopBypassWaypoints(sourcePoint, targetPoint, source, target)
                else -> createBottomBypassWaypoints(sourcePoint, targetPoint, source, target)
            }
            
            val allPoints = listOf(sourcePoint) + waypoints + targetPoint
            val path = buildPathFromWaypoints(allPoints)
            val labelPosition = calculateMidpointOfPath(allPoints)
            
            Pair(path, labelPosition)
        }
        
        return RouteResult(path = path, labelPosition = labelPos)
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –º–∞—Ä—à—Ä—É—Ç –º–µ–∂–¥—É —Ä–µ–≥–∏–æ–Ω–∞–º–∏
     */
    private fun createInterRegionBypassRoute(source: System, target: System, context: RoutingContext): RouteResult {
        val sourcePoint = getOptimalExitPoint(source, target, context)
        val targetPoint = getOptimalEntryPoint(target, source, context)
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –æ—Ç—Ä–µ–∑–æ–∫
        val needsHorizontalSegment = needsHorizontalSegment(sourcePoint, targetPoint, source, target)
        
        val (path, labelPos) = if (needsHorizontalSegment) {
            println("üîß –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –æ—Ç—Ä–µ–∑–æ–∫ –¥–ª—è inter-region route: ${source.name} -> ${target.name}")
            createRouteWithHorizontalSegment(sourcePoint, targetPoint, source, target)
        } else {
            // –î–ª—è –º–µ–∂—Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—É—é –ª–æ–≥–∏–∫—É
            val sourceRegion = findSystemRegion(source)
            val targetRegion = findSystemRegion(target)
            
            val waypoints = if (sourceRegion != null && targetRegion != null) {
                createInterRegionWaypoints(sourcePoint, targetPoint, sourceRegion, targetRegion)
            } else {
                // Fallback –∫ –ø—Ä–æ—Å—Ç–æ–º—É –æ–±—Ö–æ–¥—É
                createSimpleBypassWaypoints(sourcePoint, targetPoint, source, target)
            }
            
            val allPoints = listOf(sourcePoint) + waypoints + targetPoint
            val path = buildPathFromWaypoints(allPoints)
            val labelPosition = calculateMidpointOfPath(allPoints)
            
            Pair(path, labelPosition)
        }
        
        return RouteResult(path = path, labelPosition = labelPos)
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –º–∞—Ä—à—Ä—É—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
     */
    private fun createSpatialRoute(source: System, target: System, context: RoutingContext): RouteResult {
        val spatial = context.spatial ?: return createDefaultRoute(source, target, context)
        
        val sourcePoint = getOptimalExitPoint(source, target, context)
        val targetPoint = getOptimalEntryPoint(target, source, context)
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –æ—Ç—Ä–µ–∑–æ–∫
        val needsHorizontalSegment = needsHorizontalSegment(sourcePoint, targetPoint, source, target)
        
        val (path, labelPos) = if (needsHorizontalSegment) {
            println("üîß –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –æ—Ç—Ä–µ–∑–æ–∫ –¥–ª—è spatial route: ${source.name} -> ${target.name}")
            createRouteWithHorizontalSegment(sourcePoint, targetPoint, source, target)
        } else {
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
            val waypoints = when {
                spatial.isClose -> {
                    // –î–ª—è –±–ª–∏–∑–∫–∏—Ö —Å–∏—Å—Ç–µ–º - –ø—Ä—è–º–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ–π –æ–±—Ö–æ–¥
                    if (spatial.isDiagonal) {
                        createDiagonalWaypoints(sourcePoint, targetPoint, spatial)
                    } else {
                        emptyList()
                    }
                }
                spatial.isDiagonal -> {
                    // –î–ª—è –¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω—ã—Ö —Å–≤—è–∑–µ–π - —Å—Ç—É–ø–µ–Ω—á–∞—Ç—ã–π –º–∞—Ä—à—Ä—É—Ç
                    createSteppedWaypoints(sourcePoint, targetPoint, spatial)
                }
                else -> {
                    // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ–±—Ö–æ–¥
                    createDirectionalWaypoints(sourcePoint, targetPoint, spatial)
                }
            }
            
            val allPoints = listOf(sourcePoint) + waypoints + targetPoint
            val path = buildPathFromWaypoints(allPoints)
            val labelPosition = calculateMidpointOfPath(allPoints)
            
            Pair(path, labelPosition)
        }
        
        return RouteResult(path = path, labelPosition = labelPos)
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –º–∞—Ä—à—Ä—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
     */
    private fun createDefaultRoute(source: System, target: System, context: RoutingContext): RouteResult {
        return createDirectRoute(source, target, context)
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –ø–µ—Ç–ª—é –¥–ª—è —Å–≤—è–∑–∏ –≤–Ω—É—Ç—Ä–∏ –æ–¥–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
     */
    private fun createInternalLoopRoute(source: System, target: System, context: RoutingContext): RouteResult {
        // –î–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å–≤—è–∑–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤—É—é —Å—Ç–æ—Ä–æ–Ω—É —Å–∏—Å—Ç–µ–º—ã
        val systemCenterY = source.y + source.height / 2
        val rightEdge = source.x + source.width

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã—Å–æ—Ç—É –≤—ã—Ö–æ–¥–∞ –∏ –≤—Ö–æ–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        val outgoingOffset = context.parallelContext.outgoingIndex * outgoingSpacing
        val incomingOffset = context.parallelContext.incomingIndex * outgoingSpacing

        val sourcePoint = Point(x = rightEdge, y = systemCenterY + outgoingOffset)
        val targetPoint = Point(x = rightEdge, y = systemCenterY + incomingOffset)

        // –°–æ–∑–¥–∞–µ–º –ø–µ—Ç–ª—é —Å–ø—Ä–∞–≤–∞ –æ—Ç —Å–∏—Å—Ç–µ–º—ã
        val loopWidth = 20.0 // –®–∏—Ä–∏–Ω–∞ –ø–µ—Ç–ª–∏
        val loopX = rightEdge + loopWidth

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ—á–∫–∏ –ø–µ—Ç–ª–∏
        val waypoints = listOf(
            sourcePoint,
            Point(x = loopX, y = sourcePoint.y), // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –≤—ã—Ö–æ–¥
            Point(x = loopX, y = targetPoint.y), // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥
            Point(x = rightEdge, y = targetPoint.y) // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –≤—Ö–æ–¥
        )

        val path = buildPathFromWaypoints(waypoints)

        // –ü–æ–∑–∏—Ü–∏—è –º–µ—Ç–∫–∏ –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ –ø–µ—Ç–ª–∏
        val labelPosition = Point(
            x = loopX + 10,
            y = (sourcePoint.y + targetPoint.y) / 2
        )

        println("üîÑ –°–æ–∑–¥–∞–Ω–∞ –≤–Ω—É—Ç—Ä–∏—Å–∏—Å—Ç–µ–º–Ω–∞—è –ø–µ—Ç–ª—è –¥–ª—è: ${source.name}")

        return RouteResult(path = "", labelPosition = labelPosition)
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —Ç–æ—á–∫—É –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
     */
    private fun getOptimalExitPoint(source: System, target: System, context: RoutingContext): Point {
        val sourceCenterX = source.x + source.width / 2
        val sourceCenterY = source.y + source.height / 2
        val targetCenterX = target.x + target.width / 2
        val targetCenterY = target.y + target.height / 2
        
        val deltaX = targetCenterX - sourceCenterX
        val deltaY = targetCenterY - sourceCenterY
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Å–∏—Å—Ç–µ–º –≤ –æ–¥–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
        val isSamePlatform = context.connectionType == "intra-platform"
        val isVerticallyAligned = abs(deltaX) < source.width / 2 // –°–∏—Å—Ç–µ–º—ã –ø—Ä–∏–º–µ—Ä–Ω–æ –¥—Ä—É–≥ –Ω–∞–¥ –¥—Ä—É–≥–æ–º
        
        // –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–º –≤—ã—Ö–æ–¥–∞–º (—Å–ø—Ä–∞–≤–∞/—Å–ª–µ–≤–∞)
        // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π –≤—ã—Ö–æ–¥ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±–ª–æ–∫–∏ —Å—Ç—Ä–æ–≥–æ –¥—Ä—É–≥ –Ω–∞–¥ –¥—Ä—É–≥–æ–º –ò –Ω–µ—Ç –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π
        val isDirectlyAboveOrBelow = abs(deltaX) < source.width / 4 // –û—á–µ–Ω—å –±–ª–∏–∑–∫–æ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
        val hasObstacles = hasObstaclesBetween(source, target, context)
        
        return when {
            // –î–ª—è —Å–∏—Å—Ç–µ–º –≤ –æ–¥–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ, —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∞–≤—É—é —Å—Ç–æ—Ä–æ–Ω—É
            isSamePlatform && isVerticallyAligned -> {
                Point(x = source.x + source.width, y = sourceCenterY)
            }
            isDirectlyAboveOrBelow && !hasObstacles -> {
                // –†–µ–¥–∫–∏–π —Å–ª—É—á–∞–π: –±–ª–æ–∫–∏ —Å—Ç—Ä–æ–≥–æ –¥—Ä—É–≥ –Ω–∞–¥ –¥—Ä—É–≥–æ–º –∏ –Ω–µ—Ç –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π - –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π –≤—ã—Ö–æ–¥
                if (deltaY > 0) {
                    // –¶–µ–ª—å —Å–Ω–∏–∑—É - –≤—ã—Ö–æ–¥ —Å–Ω–∏–∑—É
                    Point(x = sourceCenterX, y = source.y + source.height)
                } else {
                    // –¶–µ–ª—å —Å–≤–µ—Ä—Ö—É - –≤—ã—Ö–æ–¥ —Å–≤–µ—Ä—Ö—É
                    Point(x = sourceCenterX, y = source.y)
                }
            }
            else -> {
                // –û—Å–Ω–æ–≤–Ω–æ–π —Å–ª—É—á–∞–π: –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –≤—ã—Ö–æ–¥ (—Å–ø—Ä–∞–≤–∞ –∏–ª–∏ —Å–ª–µ–≤–∞)
                if (deltaX >= 0) {
                    // –¶–µ–ª—å —Å–ø—Ä–∞–≤–∞ –∏–ª–∏ –Ω–∞ —Ç–æ–º –∂–µ —É—Ä–æ–≤–Ω–µ - –≤—ã—Ö–æ–¥ —Å–ø—Ä–∞–≤–∞
                    Point(x = source.x + source.width, y = sourceCenterY)
                } else {
                    // –¶–µ–ª—å —Å–ª–µ–≤–∞ - –≤—ã—Ö–æ–¥ —Å–ª–µ–≤–∞
                    Point(x = source.x, y = sourceCenterY)
                }
            }
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —Ç–æ—á–∫—É –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É
     */
    private fun getOptimalEntryPoint(target: System, source: System, context: RoutingContext): Point {
        val sourceCenterX = source.x + source.width / 2
        val sourceCenterY = source.y + source.height / 2
        val targetCenterX = target.x + target.width / 2
        val targetCenterY = target.y + target.height / 2
        
        val deltaX = targetCenterX - sourceCenterX
        val deltaY = targetCenterY - sourceCenterY
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Å–∏—Å—Ç–µ–º –≤ –æ–¥–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
        val isSamePlatform = context.connectionType == "intra-platform"
        val isVerticallyAligned = abs(deltaX) < target.width / 2 // –°–∏—Å—Ç–µ–º—ã –ø—Ä–∏–º–µ—Ä–Ω–æ –¥—Ä—É–≥ –Ω–∞–¥ –¥—Ä—É–≥–æ–º
        
        // –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–º –≤—Ö–æ–¥–∞–º (—Å–ø—Ä–∞–≤–∞/—Å–ª–µ–≤–∞)
        // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π –≤—Ö–æ–¥ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±–ª–æ–∫–∏ —Å—Ç—Ä–æ–≥–æ –¥—Ä—É–≥ –Ω–∞–¥ –¥—Ä—É–≥–æ–º –ò –Ω–µ—Ç –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π
        val isDirectlyAboveOrBelow = abs(deltaX) < target.width / 4 // –û—á–µ–Ω—å –±–ª–∏–∑–∫–æ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
        val hasObstacles = hasObstaclesBetween(source, target, context)
        
        return when {
            // –î–ª—è —Å–∏—Å—Ç–µ–º –≤ –æ–¥–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ, —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∞–≤—É—é —Å—Ç–æ—Ä–æ–Ω—É
            isSamePlatform && isVerticallyAligned -> {
                Point(x = target.x + target.width, y = targetCenterY)
            }
            isDirectlyAboveOrBelow && !hasObstacles -> {
                // –†–µ–¥–∫–∏–π —Å–ª—É—á–∞–π: –±–ª–æ–∫–∏ —Å—Ç—Ä–æ–≥–æ –¥—Ä—É–≥ –Ω–∞–¥ –¥—Ä—É–≥–æ–º –∏ –Ω–µ—Ç –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π - –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π –≤—Ö–æ–¥
                if (deltaY > 0) {
                    // –ò—Å—Ç–æ—á–Ω–∏–∫ —Å–≤–µ—Ä—Ö—É - –≤—Ö–æ–¥ —Å–≤–µ—Ä—Ö—É
                    Point(x = targetCenterX, y = target.y)
                } else {
                    // –ò—Å—Ç–æ—á–Ω–∏–∫ —Å–Ω–∏–∑—É - –≤—Ö–æ–¥ —Å–Ω–∏–∑—É
                    Point(x = targetCenterX, y = target.y + target.height)
                }
            }
            else -> {
                // –û—Å–Ω–æ–≤–Ω–æ–π —Å–ª—É—á–∞–π: –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –≤—Ö–æ–¥ (—Å–ø—Ä–∞–≤–∞ –∏–ª–∏ —Å–ª–µ–≤–∞)
                if (deltaX >= 0) {
                    // –ò—Å—Ç–æ—á–Ω–∏–∫ —Å–ª–µ–≤–∞ - –≤—Ö–æ–¥ —Å–ª–µ–≤–∞
                    Point(x = target.x, y = targetCenterY)
                } else {
                    // –ò—Å—Ç–æ—á–Ω–∏–∫ —Å–ø—Ä–∞–≤–∞ - –≤—Ö–æ–¥ —Å–ø—Ä–∞–≤–∞
                    Point(x = target.x + target.width, y = targetCenterY)
                }
            }
        }
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ –∏–∑ JavaScript –∫–æ–¥–∞)
    
    private fun areSystemsAdjacent(source: System, target: System): Boolean {
        val distance = sqrt((source.x - target.x).pow(2) + (source.y - target.y).pow(2))
        return distance < 100 // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
    }

    private fun hasObstaclesBetween(source: System, target: System, context: RoutingContext): Boolean {
        // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π
        return spatialMap.any { system ->
            system != source && system != target &&
            isSystemBetween(source, target, system)
        }
    }

    private fun isSystemBetween(source: System, target: System, obstacle: System): Boolean {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç –ª–∏ –ø—Ä—è–º–∞—è –ª–∏–Ω–∏—è –º–µ–∂–¥—É source –∏ target —Å–∏—Å—Ç–µ–º—É obstacle
        val sourceCenter = Point(source.x + source.width / 2, source.y + source.height / 2)
        val targetCenter = Point(target.x + target.width / 2, target.y + target.height / 2)
        val obstacleCenter = Point(obstacle.x + obstacle.width / 2, obstacle.y + obstacle.height / 2)
        
        // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ü–µ–Ω—Ç—Ä –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è –±–ª–∏–∑–∫–æ –∫ –ª–∏–Ω–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        val lineLength = sqrt((targetCenter.x - sourceCenter.x).pow(2) + (targetCenter.y - sourceCenter.y).pow(2))
        if (lineLength == 0.0) return false
        
        val t = max(0.0, min(1.0, 
            ((obstacleCenter.x - sourceCenter.x) * (targetCenter.x - sourceCenter.x) + 
             (obstacleCenter.y - sourceCenter.y) * (targetCenter.y - sourceCenter.y)) / lineLength.pow(2)
        ))
        
        val projection = Point(
            x = sourceCenter.x + t * (targetCenter.x - sourceCenter.x),
            y = sourceCenter.y + t * (targetCenter.y - sourceCenter.y)
        )
        
        val distance = sqrt((obstacleCenter.x - projection.x).pow(2) + (obstacleCenter.y - projection.y).pow(2))
        return distance < max(obstacle.width, obstacle.height) / 2
    }

    private fun determineBestBypassDirection(source: System, target: System, context: RoutingContext): String {
        // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—Ö–æ–¥–∞
        val spatial = context.spatial
        return when (spatial?.primaryDirection) {
            "right", "left" -> "top" // –î–ª—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã—Ö —Å–≤—è–∑–µ–π –æ–±—Ö–æ–¥–∏–º —Å–≤–µ—Ä—Ö—É
            "up", "down" -> "right" // –î–ª—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã—Ö —Å–≤—è–∑–µ–π –æ–±—Ö–æ–¥–∏–º —Å–ø—Ä–∞–≤–∞
            else -> "right"
        }
    }

    private fun findSystemRegion(system: System): Region? {
        return regions.find { region ->
            region.platforms.any { platform ->
                platform.systems.contains(system)
            }
        }
    }

    // –ú–µ—Ç–æ–¥—ã —Å–æ–∑–¥–∞–Ω–∏—è waypoints (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏)
    
    private fun createRightBypassWaypoints(start: Point, end: Point, source: System, target: System): List<Point> {
        val midX = max(source.x + source.width, target.x + target.width) + bypassPadding
        return listOf(
            Point(x = midX, y = start.y),
            Point(x = midX, y = end.y)
        )
    }

    private fun createLeftBypassWaypoints(start: Point, end: Point, source: System, target: System): List<Point> {
        val midX = min(source.x, target.x) - bypassPadding
        return listOf(
            Point(x = midX, y = start.y),
            Point(x = midX, y = end.y)
        )
    }

    private fun createTopBypassWaypoints(start: Point, end: Point, source: System, target: System): List<Point> {
        val midY = min(source.y, target.y) - bypassPadding
        return listOf(
            Point(x = start.x, y = midY),
            Point(x = end.x, y = midY)
        )
    }

    private fun createBottomBypassWaypoints(start: Point, end: Point, source: System, target: System): List<Point> {
        val midY = max(source.y + source.height, target.y + target.height) + bypassPadding
        return listOf(
            Point(x = start.x, y = midY),
            Point(x = end.x, y = midY)
        )
    }

    private fun createInterRegionWaypoints(start: Point, end: Point, sourceRegion: Region, targetRegion: Region): List<Point> {
        // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –º–µ–∂—Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        val midY = if (sourceRegion.y < targetRegion.y) {
            sourceRegion.y - bypassPadding
        } else {
            sourceRegion.y + sourceRegion.height + bypassPadding
        }
        
        return listOf(
            Point(x = start.x, y = midY),
            Point(x = end.x, y = midY)
        )
    }

    private fun createSimpleBypassWaypoints(start: Point, end: Point, source: System, target: System): List<Point> {
        return createRightBypassWaypoints(start, end, source, target)
    }

    private fun createDiagonalWaypoints(start: Point, end: Point, spatial: SpatialInfo): List<Point> {
        // –î–ª—è –¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω—ã—Ö –±–ª–∏–∑–∫–∏—Ö —Å–≤—è–∑–µ–π - –æ–¥–Ω–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è —Ç–æ—á–∫–∞
        return listOf(
            Point(x = start.x + spatial.deltaX / 2, y = start.y + spatial.deltaY / 2)
        )
    }

    private fun createSteppedWaypoints(start: Point, end: Point, spatial: SpatialInfo): List<Point> {
        // –°—Ç—É–ø–µ–Ω—á–∞—Ç—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω—ã—Ö —Å–≤—è–∑–µ–π
        return when (spatial.primaryDirection) {
            "right", "left" -> listOf(Point(x = end.x, y = start.y))
            else -> listOf(Point(x = start.x, y = end.y))
        }
    }

    private fun createDirectionalWaypoints(start: Point, end: Point, spatial: SpatialInfo): List<Point> {
        // –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        return when (spatial.primaryDirection) {
            "right" -> listOf(Point(x = end.x, y = start.y))
            "left" -> listOf(Point(x = end.x, y = start.y))
            "down" -> listOf(Point(x = start.x, y = end.y))
            "up" -> listOf(Point(x = start.x, y = end.y))
            else -> emptyList()
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–µ–Ω –ª–∏ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –æ—Ç—Ä–µ–∑–æ–∫ –ø–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞ –∏–∑ –±–ª–æ–∫–∞
     */
    private fun needsHorizontalSegment(sourcePoint: Point, targetPoint: Point, source: System, target: System): Boolean {
        // –ï—Å–ª–∏ –≤—ã—Ö–æ–¥ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π (—Å–ø—Ä–∞–≤–∞ –∏–ª–∏ —Å–ª–µ–≤–∞)
        val isHorizontalExit = sourcePoint.x == source.x || sourcePoint.x == source.x + source.width
        
        // –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –æ—Ç—Ä–µ–∑–æ–∫ –¥–ª—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã—Ö –≤—ã—Ö–æ–¥–æ–≤,
        // –∫—Ä–æ–º–µ —Å–ª—É—á–∞–µ–≤ –∫–æ–≥–¥–∞ —Ü–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Å—Ç—Ä–æ–≥–æ –Ω–∞ —Ç–æ–π –∂–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏ –ò –æ—á–µ–Ω—å –±–ª–∏–∑–∫–æ
        val isSameHorizontalLevel = abs(sourcePoint.y - targetPoint.y) <= 5 // –û—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å
        val isVeryClose = abs(sourcePoint.x - targetPoint.x) < 50 // –û—á–µ–Ω—å –±–ª–∏–∑–∫–æ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
        
        return isHorizontalExit && !(isSameHorizontalLevel && isVeryClose)
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç –º–∞—Ä—à—Ä—É—Ç —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–º –æ—Ç—Ä–µ–∑–∫–æ–º
     */
    private fun createRouteWithHorizontalSegment(sourcePoint: Point, targetPoint: Point, source: System, target: System): Pair<String, Point> {
        val horizontalLength = 30.0 // –î–ª–∏–Ω–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—Ä–µ–∑–∫–∞
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—Ä–µ–∑–∫–∞
        val isExitingRight = sourcePoint.x == source.x + source.width
        val horizontalEndX = if (isExitingRight) {
            sourcePoint.x + horizontalLength
        } else {
            sourcePoint.x - horizontalLength
        }
        
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ç–æ—á–∫–∏
        val horizontalEndPoint = Point(x = horizontalEndX, y = sourcePoint.y)
        
        // –ï—Å–ª–∏ —Ü–µ–ª—å —É–∂–µ –Ω–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–º —É—Ä–æ–≤–Ω–µ, –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—É—é —Ç–æ—á–∫—É
        val waypoints = if (abs(sourcePoint.y - targetPoint.y) <= 5) {
            // –¶–µ–ª—å –Ω–∞ —Ç–æ–º –∂–µ —É—Ä–æ–≤–Ω–µ - —Ç–æ–ª—å–∫–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –æ—Ç—Ä–µ–∑–æ–∫, –∑–∞—Ç–µ–º –∫ —Ü–µ–ª–∏
            listOf(sourcePoint, horizontalEndPoint, targetPoint)
        } else {
            // –¶–µ–ª—å –Ω–∞ –¥—Ä—É–≥–æ–º —É—Ä–æ–≤–Ω–µ - –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –æ—Ç—Ä–µ–∑–æ–∫, –∑–∞—Ç–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π, –∑–∞—Ç–µ–º –∫ —Ü–µ–ª–∏
            val beforeTargetPoint = Point(x = horizontalEndX, y = targetPoint.y)
            listOf(sourcePoint, horizontalEndPoint, beforeTargetPoint, targetPoint)
        }
        
        // –°—Ç—Ä–æ–∏–º –ø—É—Ç—å
        val path = buildPathFromWaypoints(waypoints)
        
        // –£–ª—É—á—à–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∏ - —Ç–æ—á–Ω–æ –ø–æ —Å–µ—Ä–µ–¥–∏–Ω–µ –≤—Å–µ–≥–æ –ø—É—Ç–∏
        val labelPosition = calculateMidpointOfPath(waypoints)
        
        return Pair(path, labelPosition)
    }

    private fun buildPathFromWaypoints(waypoints: List<Point>): String {
        if (waypoints.isEmpty()) return ""
        if (waypoints.size == 1) return "M ${waypoints[0].x},${waypoints[0].y}"
        
        val path = StringBuilder("M ${waypoints[0].x},${waypoints[0].y}")
        
        // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Ç–æ—á–∫–∏
        val uniqueWaypoints = waypoints.zipWithNext().filter { (current, next) ->
            current.x != next.x || current.y != next.y
        }.map { it.second }
        
        uniqueWaypoints.forEach { point ->
            path.append(" L ${point.x},${point.y}")
        }
        
        return path.toString()
    }
    
    /**
     * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ç–æ—á–Ω—É—é —Å–µ—Ä–µ–¥–∏–Ω—É –ø—É—Ç–∏ –ø–æ –¥–ª–∏–Ω–µ —Å–µ–≥–º–µ–Ω—Ç–æ–≤
     */
    private fun calculateMidpointOfPath(waypoints: List<Point>): Point {
        if (waypoints.size < 2) {
            return waypoints.firstOrNull() ?: Point(0.0, 0.0)
        }
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é –¥–ª–∏–Ω—É –ø—É—Ç–∏
        var totalLength = 0.0
        val segments = mutableListOf<Pair<Double, Pair<Point, Point>>>()
        
        for (i in 0 until waypoints.size - 1) {
            val start = waypoints[i]
            val end = waypoints[i + 1]
            val length = sqrt((end.x - start.x).pow(2) + (end.y - start.y).pow(2))
            segments.add(Pair(length, Pair(start, end)))
            totalLength += length
        }
        
        // –ù–∞—Ö–æ–¥–∏–º —Å–µ—Ä–µ–¥–∏–Ω—É –ø–æ –¥–ª–∏–Ω–µ
        val halfLength = totalLength / 2
        var currentLength = 0.0
        
        for ((segmentLength, segment) in segments) {
            if (currentLength + segmentLength >= halfLength) {
                // –°–µ—Ä–µ–¥–∏–Ω–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —ç—Ç–æ–º —Å–µ–≥–º–µ–Ω—Ç–µ
                val remainingLength = halfLength - currentLength
                val ratio = if (segmentLength > 0) remainingLength / segmentLength else 0.0
                
                val start = segment.first
                val end = segment.second
                
                return Point(
                    x = start.x + (end.x - start.x) * ratio,
                    y = start.y + (end.y - start.y) * ratio
                )
            }
            currentLength += segmentLength
        }
        
        // Fallback - —Å–µ—Ä–µ–¥–∏–Ω–∞ –º–µ–∂–¥—É –ø–µ—Ä–≤–æ–π –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç–æ—á–∫–æ–π
        val first = waypoints.first()
        val last = waypoints.last()
        return Point(
            x = (first.x + last.x) / 2,
            y = (first.y + last.y) / 2
        )
    }
}

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–ª–∞—Å—Å—ã
 */
data class RoutingRule(
    val name: String,
    val description: String,
    val condition: (System, System, RoutingContext) -> Boolean,
    val strategy: String
)

data class RoutingContext(
    val parallelContext: ParallelContext = ParallelContext(),
    val connectionData: Connection? = null,
    val spatial: SpatialInfo? = null,
    val connectionType: String = "unknown"
)

data class ParallelContext(
    val totalIncoming: Int = 1,
    val totalOutgoing: Int = 1,
    val incomingIndex: Int = 0,
    val outgoingIndex: Int = 0,
    val side: String? = null,
    val spatial: SpatialInfo? = null
)

data class RouteResult(
    val path: String,
    val labelPosition: Point
)
