package com.businessarch.generator

import com.businessarch.generator.model.*
import kotlinx.coroutines.runBlocking
import kotlinx.serialization.json.Json
import kotlinx.serialization.decodeFromString
import java.io.File

/**
 * –ì–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–∏–∑–Ω–µ—Å-–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –Ω–∞ Kotlin
 */
class App {
    private val generator = BusinessArchitectureGenerator()
    
    /**
     * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –ø—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
     */
    fun runDemo() {
        println("üöÄ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –±–∏–∑–Ω–µ—Å-–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã (Kotlin)")
        
        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        val testData = createTestBusinessData()
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
        val result = generator.generateBusinessArchitecture(testData)
        
        if (result.success && result.data != null) {
            println("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            println("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            println("  - –°–∏—Å—Ç–µ–º: ${result.data.stats.systems}")
            println("  - –°–≤—è–∑–µ–π: ${result.data.stats.connections}")
            println("  - –†–µ–≥–∏–æ–Ω–æ–≤: ${result.data.stats.regions}")
            println("  - –ü–ª–∞—Ç—Ñ–æ—Ä–º: ${result.data.stats.platforms}")
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º SVG
            val filename = generator.exportToSVG(result.data.svg, "kotlin-business-architecture.svg")
            println("üíæ SVG —Å–æ—Ö—Ä–∞–Ω–µ–Ω: $filename")
            
        } else {
            println("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ${result.error}")
        }
    }
    
    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–∞
     */
    fun loadAndProcess(jsonFilePath: String) {
        try {
            val jsonContent = File(jsonFilePath).readText()
            val businessData = Json.decodeFromString<BusinessData>(jsonContent)
            
            println("üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑: $jsonFilePath")
            
            val result = generator.generateBusinessArchitecture(businessData)
            
            if (result.success && result.data != null) {
                println("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                val filename = generator.exportToSVG(result.data.svg, "output-business-architecture.svg")
                println("üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: $filename")
            } else {
                println("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${result.error}")
            }
            
        } catch (e: Exception) {
            println("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: ${e.message}")
        }
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
     */
    private fun createTestBusinessData(): BusinessData {
        return BusinessData(
            AS = listOf(
                AutomatedSystem(
                    id = "crm",
                    name = "CRM –°–∏—Å—Ç–µ–º–∞",
                    platform = "–ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞",
                    region = "–§—Ä–æ–Ω—Ç-–æ—Ñ–∏—Å",
                    role = listOf("sales_channel")
                ),
                AutomatedSystem(
                    id = "erp",
                    name = "ERP –°–∏—Å—Ç–µ–º–∞",
                    platform = "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞", 
                    region = "–ë—ç–∫-–æ—Ñ–∏—Å",
                    role = listOf("product_fabric")
                ),
                AutomatedSystem(
                    id = "billing",
                    name = "–ë–∏–ª–ª–∏–Ω–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞",
                    platform = "–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞",
                    region = "–ë—ç–∫-–æ—Ñ–∏—Å",
                    role = listOf()
                ),
                AutomatedSystem(
                    id = "external_bank",
                    name = "–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞",
                    platform = "–í–Ω–µ—à–Ω—è—è –ê–°",
                    region = null,
                    role = listOf()
                )
            ),
            Function = listOf(
                BusinessFunction(
                    id = "f1",
                    name = "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞–º–∏",
                    type = "business",
                    AS = "CRM –°–∏—Å—Ç–µ–º–∞"
                ),
                BusinessFunction(
                    id = "f2", 
                    name = "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–æ–≤",
                    type = "business",
                    AS = "CRM –°–∏—Å—Ç–µ–º–∞"
                ),
                BusinessFunction(
                    id = "f3",
                    name = "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–º",
                    type = "business", 
                    AS = "ERP –°–∏—Å—Ç–µ–º–∞"
                ),
                BusinessFunction(
                    id = "f4",
                    name = "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π —É—á–µ—Ç",
                    type = "business",
                    AS = "ERP –°–∏—Å—Ç–µ–º–∞"
                ),
                BusinessFunction(
                    id = "f5",
                    name = "–í—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç–æ–≤",
                    type = "business",
                    AS = "–ë–∏–ª–ª–∏–Ω–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞"
                )
            ),
            Link = listOf(
                SystemLink(
                    source = LinkTarget(AS = "CRM –°–∏—Å—Ç–µ–º–∞"),
                    target = LinkTarget(AS = "ERP –°–∏—Å—Ç–µ–º–∞"),
                    description = "–ü–µ—Ä–µ–¥–∞—á–∞ –∑–∞–∫–∞–∑–æ–≤"
                ),
                SystemLink(
                    source = LinkTarget(AS = "ERP –°–∏—Å—Ç–µ–º–∞"),
                    target = LinkTarget(AS = "–ë–∏–ª–ª–∏–Ω–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞"),
                    description = "–î–∞–Ω–Ω—ã–µ –¥–ª—è –±–∏–ª–ª–∏–Ω–≥–∞"
                ),
                SystemLink(
                    source = LinkTarget(AS = "–ë–∏–ª–ª–∏–Ω–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞"),
                    target = LinkTarget(AS = "–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞"),
                    description = "–ü–ª–∞—Ç–µ–∂–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏"
                )
            )
        )
    }
}

fun main(args: Array<String>) = runBlocking {
    val app = App()
    
    if (args.isNotEmpty()) {
        // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –∞—Ä–≥—É–º–µ–Ω—Ç - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª
        app.loadAndProcess(args[0])
    } else {
        // –ò–Ω–∞—á–µ –∑–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ
        app.runDemo()
    }
}
